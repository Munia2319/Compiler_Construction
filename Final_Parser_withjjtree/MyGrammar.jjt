options {
    STATIC = false;
}
PARSER_BEGIN(MyLanguageParser)

public class MyLanguageParser {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Usage: java MyLanguageParser \"<input>\"");
            return; // Exit the program
        }

        MyLanguageParser parser = new MyLanguageParser(new java.io.StringReader(args[0]));
        try {
            SimpleNode rootNode = parser.Program();
            rootNode.dump(" ");
            System.out.println("Parsing completed successfully.");
        } catch (ParseException e) {
            System.out.println("Error");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}


PARSER_END(MyLanguageParser)

SKIP: {
    " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN : /* Keywords */
{
    < ALGORITHM_NAME: "Algorithm name-" >
  | < DECLARATION_BLOCK: "Declaration block-" >
  | < INTEGER: "integer" >
  | < FLOAT: "float" >
  | < STRING: "string" >
  | < VOID: "void" >
  | < FUNCTION: "function" >
  | < START: "start" >
  | < END: "end" >
  | < IF: "if" >
  | < ELSE_IF: "else if">
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < SHOW: "show" >
  | < RETURN: "return" >
  | < BREAK: "break" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < AND: "AND" >
  | < OR: "OR" >
  | < NOT: "NOT" >
}

TOKEN : /* Symbols and Operators */
{
    < SEMICOLON: ";" >
  | < COMMA: "," >
  | < EQUALS: "=" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < MULT: "*" >
  | < DIV: "/" >
  | < DOT: "." >
  | < HASH: "#" >
  | < LESS: "<" >
  | < GREATER: ">" >
  | < LESSEQUAL: "<=" >
  | < GREATEREQUAL: ">=" >
  | < EQUAL: "==" >
  | < NOTEQUAL: "!=" >
  | < COLON: ":" >
}

TOKEN : {
  < #LETTER: ["a"-"z", "A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < ID: <LETTER> (<LETTER> | <DIGIT> | "_" | "-" )* >
}

TOKEN : {
  < STRING_LITERAL: "\"" (~["\""])* "\"" >
}

TOKEN : {
  < #INTEGER_PART: (<DIGIT>) + >
| < #FRACTIONAL_PART: "." (<DIGIT>)+ >
| < NUMBER_LITERAL: <INTEGER_PART> (<FRACTIONAL_PART>)? >
}

SimpleNode Program() #Program : {}
{
    AlgorithmName() VariableFunctionDeclarations() MainBlock() {return jjtThis;}
}

void AlgorithmName() #AlgorithmName : {}
{
    <ALGORITHM_NAME> <ID>
}

void VariableFunctionDeclarations() #VariableFunctionDeclarations : {}
{
  (DeclarationBlock())?
}

void DeclarationBlock() #DeclarationBlock : {}
{
    <DECLARATION_BLOCK> (Declaration())*
}

void Declaration() #Declaration : {}
{
        Type() VarFuncDeclarationTail()

}
void Type() #Type : {}
{
    <INTEGER> | <FLOAT> | <STRING> | <VOID>
}

void VarFuncDeclarationTail() #VarFuncDeclarationTail: {}
{
    VariableDeclaration() | FunctionDeclaration()
}

void VariableDeclaration() #VariableDeclaration: {}
{
    Variables() <SEMICOLON>
}

void Variables() #Variables: {}
{
    Variable() (LOOKAHEAD(2) VariableTail())*
}

void VariableTail() #VariableTail : {}
{
    <COMMA> Variable() (LOOKAHEAD(2) VariableTail())?
}

void Variable() #Variable: {}
{
    <ID> [Variable2()]
}

void Variable2() #Variable2: {}
{
    <EQUALS> <NUMBER_LITERAL>
}


void FunctionDeclaration() #FunctionDeclaration : {}
{
    <FUNCTION> <ID> <LPAREN> Parameters() <RPAREN> Block()
}

void Parameters() #Parameters : {}
{
    Parameter() (ParametersTail())*
}

void ParametersTail() : {}
{
    <COMMA> Parameter() (LOOKAHEAD(2) ParametersTail())?
}

void Parameter() #Parameter : {}
{
    Type() Variables()
}
void MainBlock() #MainBlock : {}
{
    <START> Block() <END>
}

void Block() #Block : {}
{
    <LBRACE> (Content())? <RBRACE>
}

void Content() #Content : {}
{
    Statements()
}
void Statements() #Statements : {}
{
    Statement() (StatementsTail())*
}

void StatementsTail() : {}
{
    Statement() (LOOKAHEAD(2) StatementsTail())?
}

void Statement() #Statement : {}
{
    IfStatement() | WhileStatement()| AssignmentStatement() |PrintStatement()| CommentStatement() | BreakStatement() | ReturnStatement()
}

void IfStatement() #IfStatement : {}
{
    <IF> <LPAREN> BoolExpression() <RPAREN> Block() (ElseIfStatement())* [ElseStatement()]
}

void ElseIfStatement() #ElseIfStatement : {}
{
    <ELSE_IF> <LPAREN> BoolExpression() <RPAREN> Block()
}

void ElseStatement() #ElseStatement : {}
{
    <ELSE> Block()
}
void CommentStatement() #CommentStatement : {}
{
    <HASH> (<NUMBER_LITERAL> | <STRING_LITERAL>)* <HASH>
}

void ReturnStatement() #ReturnStatement : {}
{
    <RETURN> ArithmeticExpression() <SEMICOLON>
}

void BreakStatement() #BreakStatement : {}
{
    <BREAK> <SEMICOLON>
}

void PrintStatement() #PrintStatement : {}
{
    <SHOW> <LPAREN> PrintArguments() <RPAREN> <SEMICOLON>
}

void PrintArguments() #PrintArguments : {}
{
    PrintArgument() (PrintArgumentsTail())*
}

void PrintArgumentsTail() : {}
{
    <PLUS> PrintArgument() (LOOKAHEAD(3) PrintArgumentsTail())?
}

void PrintArgument() #PrintArgument : {}
{
    <STRING_LITERAL> | <ID>
}


void AssignmentStatement() #AssignmentStatement: {}
{
    <ID> <EQUALS> AssignmentStatementTail()
}
void AssignmentStatementTail() #AssignmentStatementTail : {}
{
    LOOKAHEAD(3) VariableAssignment() | FunctionCallAssignment()
}
void VariableAssignment() #VariableAssignment : {}
{
     ArithmeticExpression() <SEMICOLON>
}
void FunctionCallAssignment() #FunctionCallAssignment : {}
{
    FunctionCall() <SEMICOLON>
}

void WhileStatement() #WhileStatement : {}
{
    <WHILE> <LPAREN> BoolExpression() <RPAREN> Block()
}

void BoolExpression() #BoolExpression : {}
{
    BTerm() BoolExpressionTail()
}

void BoolExpressionTail() : {}
{
    (<OR> BTerm())*
}

void BTerm() #BTerm : {}
{
    BFactor() BTermTail()
}

void BTermTail() : {}
{
    (<AND> BFactor())*
}

void BFactor() #BFactor : {}
{
    (<NOT> BoolValue()) | BoolValue()
}

void BoolValue() #BoolValue : {}
{
   LOOKAHEAD(CompareExpression()) CompareExpression()
   | <TRUE>
   | <FALSE>
   | LOOKAHEAD(3) <LPAREN> BoolExpression() <RPAREN>
   | LOOKAHEAD(3) <ID>
   | LOOKAHEAD(3) FunctionCall()

}

void CompareExpression() #CompareExpression : {}
{
    ArithmeticExpression() CompareOperator() ArithmeticExpression()
}

void CompareOperator() : {}
{
    <LESS> | <GREATER> | <LESSEQUAL> | <GREATEREQUAL> | <EQUAL> | <NOTEQUAL>
}

void ArithmeticExpression() #ArithmeticExpression : {}
{
    ATerm() ArithmeticExpressionTail()
}

void ArithmeticExpressionTail() : {}
{
    (<PLUS> ATerm() | <MINUS> ATerm())*
}

void ATerm() #ATerm : {}
{
    AFactor() ATermTail()
}

void ATermTail() : {}
{
    (<MULT> AFactor() | <DIV> AFactor())*
}

void AFactor() #AFactor : {}
{
    <NUMBER_LITERAL>
    | <ID>
    | <LPAREN> ArithmeticExpression() <RPAREN>
    | FunctionCall()

}
void FunctionCall() #FunctionCall : {}
{
    <FUNCTION> <ID> <LPAREN> [Parameters()] <RPAREN>
}