/* Generated By:JavaCC: Do not edit this line. MyLanguageParser.java */
import java.io.PrintStream;
import java.util.HashMap;

public class MyLanguageParser implements MyLanguageParserConstants {
    HashMap<String, Double> symbolTable = new HashMap<String, Double>();
  public static void main(String[] args)  {
    MyLanguageParser parser = new MyLanguageParser(System.in);
    try{
        parser.Program();
        System.out.println(" Parsing completed successfully.");
    }
    catch(ParseException e){
        System.out.println(" Error");
        e.printStackTrace();
    }

  }

  // Insert or update a variable in the symbol table
    void insertSymbol(String symbol, Double value) {
      symbolTable.put(symbol, value);
    }

    // Retrieve a variable's value from the symbol table
    Double getSymbolValue(String symbol) {
      return symbolTable.get(symbol);
    }

/*TOKEN :
{
    < IDENTIFIER: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","_"])* >
  | < INTEGER_LITERAL: (["0"-"9"])+ >
  | < FLOAT_LITERAL: (["0"-"9"])+ "."(["0"-"9"])+ >
  | < STRING_LITERAL: "\"" (~["\"","\\"] | "\\\\" | "\\\"")* "\"" >
}*/
  final public void Program() throws ParseException {
    AlgorithmName();
    VariableFunctionDeclarations();
    MainBlock();
  }

  final public void AlgorithmName() throws ParseException {
    jj_consume_token(ALGORITHM_NAME);
    jj_consume_token(ID);
  }

  final public void VariableFunctionDeclarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
      DeclarationBlock();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void DeclarationBlock() throws ParseException {
    jj_consume_token(DECLARATION);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case STRING:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Declaration();
    }
  }

  final public void Declaration() throws ParseException {
    Type();
    VarFuncDeclarationTail();
  }

  final public void VarFuncDeclarationTail() throws ParseException {
    VariableDeclaration();
  }

  final public void VariableDeclaration() throws ParseException {
    Variable();
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      Variable();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable() throws ParseException {
    Token varName;
    double[] result = new double[1];
    varName = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      Expression(result);
            insertSymbol(varName.image, result[0]); // Insert the result into the symbol table

      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void Expression(double[] result) throws ParseException {
    double[] termResult = new double[1];
    Term(termResult);
    ExpressionTail(termResult);
                                                  result[0] = termResult[0];
  }

  final public void ExpressionTail(double[] inheritedValue) throws ParseException {
    double[] termResult = new double[1];
    double temp;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        Term(termResult);
                               inheritedValue[0] += termResult[0];
        break;
      case MINUS:
        jj_consume_token(MINUS);
        Term(termResult);
                                inheritedValue[0] -= termResult[0];
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Term(double[] result) throws ParseException {
    double[] factorValue = new double[1];
    Factor(factorValue);
    TermTail(factorValue);
                                               result[0] = factorValue[0];
  }

  final public void TermTail(double[] result) throws ParseException {
    double[] factorValue = new double[1];
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        Factor(factorValue);
                                  result[0] *= factorValue[0];
        break;
      case DIV:
        jj_consume_token(DIV);
        Factor(factorValue);
       result[0] /= factorValue[0];
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Factor(double[] result) throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_LITERAL:
      t = jj_consume_token(NUMBER_LITERAL);
                          result[0] = Double.parseDouble(t.image);
      break;
    case ID:
      t = jj_consume_token(ID);
        Double value = getSymbolValue(t.image);
        if (value != null) {
            result[0] = value;
        } else {
            // Handle undefined variable; you might throw an error or set to 0
            result[0] = 0;
        }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression(result);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MainBlock() throws ParseException {
    jj_consume_token(START);
    Block();
    jj_consume_token(END);
  }

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHOW:
    case ID:
      Content();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void Content() throws ParseException {
    Statements();
  }

  final public void Statements() throws ParseException {
    Statement();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOW:
      case ID:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      StatementsTail();
    }
  }

  final public void StatementsTail() throws ParseException {
    Statement();
    if (jj_2_2(2)) {
      StatementsTail();
    } else {
      ;
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      AssignmentStatement();
      break;
    case SHOW:
      PrintStatement();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentStatement() throws ParseException {
    Token varName;
    double[] result = new double[1];
    varName = jj_consume_token(ID);
    jj_consume_token(EQUALS);
    Expression(result);
    jj_consume_token(SEMICOLON);
        insertSymbol(varName.image, result[0]); // Insert the result into the symbol table

  }

  final public void PrintStatement() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(LPAREN);
    PrintArguments();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void PrintArguments() throws ParseException {
    PrintArgument();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      PrintArgumentsTail();
    }
  }

  final public void PrintArgumentsTail() throws ParseException {
    jj_consume_token(PLUS);
    PrintArgument();
    if (jj_2_3(3)) {
      PrintArgumentsTail();
    } else {
      ;
    }
  }

  final public void PrintArgument() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                         System.out.print(t.image.substring(1, t.image.length() - 1));
      break;
    case ID:
      t = jj_consume_token(ID);
    Double value = getSymbolValue(t.image);
    if (value != null) {
      System.out.print(value);
    } else {
      System.out.print("Undefined variable: " + t.image); // Handle undefined variables
    }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(SHOW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public MyLanguageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x780,0x780,0x10000000,0x0,0x0,0x0,0x0,0x20000000,0x40000,0x40000,0x40000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x6,0x6,0x18,0x18,0x110000,0x10000,0x10000,0x10000,0x2,0x30000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyLanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyLanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyLanguageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyLanguageParser(MyLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
