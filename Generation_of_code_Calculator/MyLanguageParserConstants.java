/* Generated By:JavaCC: Do not edit this line. MyLanguageParserConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyLanguageParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALGORITHM_NAME = 5;
  /** RegularExpression Id. */
  int DECLARATION = 6;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int FLOAT = 8;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int VOID = 10;
  /** RegularExpression Id. */
  int FUNCTION = 11;
  /** RegularExpression Id. */
  int START = 12;
  /** RegularExpression Id. */
  int END = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int ELSE_IF = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int SHOW = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int SEMICOLON = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int EQUALS = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int LBRACE = 31;
  /** RegularExpression Id. */
  int RBRACE = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int MULT = 35;
  /** RegularExpression Id. */
  int DIV = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int HASH = 38;
  /** RegularExpression Id. */
  int LESS = 39;
  /** RegularExpression Id. */
  int GREATER = 40;
  /** RegularExpression Id. */
  int LESSEQUAL = 41;
  /** RegularExpression Id. */
  int GREATEREQUAL = 42;
  /** RegularExpression Id. */
  int EQUAL = 43;
  /** RegularExpression Id. */
  int NOTEQUAL = 44;
  /** RegularExpression Id. */
  int COLON = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int STRING_LITERAL = 49;
  /** RegularExpression Id. */
  int INTEGER_PART = 50;
  /** RegularExpression Id. */
  int FRACTIONAL_PART = 51;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"Algorithm name-\"",
    "\"Declaration block-\"",
    "\"integer\"",
    "\"float\"",
    "\"string\"",
    "\"void\"",
    "\"function\"",
    "\"start\"",
    "\"end\"",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"while\"",
    "\"show\"",
    "\"return\"",
    "\"break\"",
    "\"true\"",
    "\"false\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".\"",
    "\"#\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\":\"",
    "<LETTER>",
    "<DIGIT>",
    "<ID>",
    "<STRING_LITERAL>",
    "<INTEGER_PART>",
    "<FRACTIONAL_PART>",
    "<NUMBER_LITERAL>",
  };

}
