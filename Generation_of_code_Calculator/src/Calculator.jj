options {
  STATIC = false;
}

PARSER_BEGIN(MyLanguageParser)

import java.io.PrintStream;
import java.util.HashMap;

public class MyLanguageParser {
    HashMap<String, Double> symbolTable = new HashMap<String, Double>();
  public static void main(String[] args)  {
    MyLanguageParser parser = new MyLanguageParser(System.in);
    try{
        parser.Program();
        System.out.println(" Parsing completed successfully.");
    }
    catch(ParseException e){
        System.out.println(" Error");
        e.printStackTrace();
    }

  }

  // Insert or update a variable in the symbol table
    void insertSymbol(String symbol, Double value) {
      symbolTable.put(symbol, value);
    }

    // Retrieve a variable's value from the symbol table
    Double getSymbolValue(String symbol) {
      return symbolTable.get(symbol);
    }
}

PARSER_END(MyLanguageParser)


SKIP :
{
    " "
  | "\t"
  | "\r"
  | "\n"
}


TOKEN : /* Keywords */
{
    < ALGORITHM_NAME: "Algorithm name-" >
  | < DECLARATION: "Declaration block-" >
  | < INTEGER: "integer" >
  | < FLOAT: "float" >
  | < STRING: "string" >
  | < VOID: "void" >
  | < FUNCTION: "function" >
  | < START: "start" >
  | < END: "end" >
  | < IF: "if" >
  | < ELSE_IF: "else if">
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < SHOW: "show" >
  | < RETURN: "return" >
  | < BREAK: "break" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < AND: "AND" >
  | < OR: "OR" >
  | < NOT: "NOT" >
}

TOKEN : /* Symbols and Operators */
{
    < SEMICOLON: ";" >
  | < COMMA: "," >
  | < EQUALS: "=" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < MULT: "*" >
  | < DIV: "/" >
  | < DOT: "." >
  | < HASH: "#" >
  | < LESS: "<" >
  | < GREATER: ">" >
  | < LESSEQUAL: "<=" >
  | < GREATEREQUAL: ">=" >
  | < EQUAL: "==" >
  | < NOTEQUAL: "!=" >
  | < COLON: ":" >
}

TOKEN : {
  < #LETTER: ["a"-"z", "A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < ID: <LETTER> (<LETTER> | <DIGIT> | "_" | "-" )* >
}

TOKEN : {
  < STRING_LITERAL: "\"" (~["\""])* "\"" >
}

TOKEN : {
  < #INTEGER_PART: (<DIGIT>) + >
| < #FRACTIONAL_PART: "." (<DIGIT>)+ >
| < NUMBER_LITERAL: <INTEGER_PART> (<FRACTIONAL_PART>) >
}


/*TOKEN :
{
    < IDENTIFIER: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","_"])* >
  | < INTEGER_LITERAL: (["0"-"9"])+ >
  | < FLOAT_LITERAL: (["0"-"9"])+ "."(["0"-"9"])+ >
  | < STRING_LITERAL: "\"" (~["\"","\\"] | "\\\\" | "\\\"")* "\"" >
}*/



void Program() :
{}
{
  AlgorithmName() VariableFunctionDeclarations() MainBlock()
}

void AlgorithmName() :
{}
{
  <ALGORITHM_NAME> <ID>
}

void VariableFunctionDeclarations() :
{}
{
  (DeclarationBlock())?
}

void DeclarationBlock() :
{}
{
  <DECLARATION> (Declaration())*
}

void Declaration(): {}
{
    Type() VarFuncDeclarationTail()
}

void VarFuncDeclarationTail(): {}
{
    VariableDeclaration()
}

void VariableDeclaration(): {}
{
    Variable() (LOOKAHEAD(2) <COMMA> Variable())* <SEMICOLON>
}


void Type() : {}
{
     <FLOAT>
}


void Variable() : {
    Token varName;
    double[] result = new double[1]; // Array to hold the expression result
}
{
    varName = <ID>
    (
        <EQUALS> Expression(result) {
            insertSymbol(varName.image, result[0]); // Insert the result into the symbol table
        }
    )?
}


void Expression(double[] result) : {
    double[] termResult = new double[1];
}
{
    Term(termResult) ExpressionTail(termResult) { result[0] = termResult[0]; }
}
void ExpressionTail(double[] inheritedValue) : {
    double[] termResult = new double[1];
    double temp;
}
{
    (
      <PLUS> Term(termResult) {inheritedValue[0] += termResult[0];}
    |
      <MINUS> Term(termResult) {inheritedValue[0] -= termResult[0];}
    )*
}

void Term(double[] result) : {
    double[] factorValue = new double[1];
}
{
    Factor(factorValue) TermTail(factorValue) {result[0] = factorValue[0];}
}

void TermTail(double[] result) : {
    double[] factorValue = new double[1];
}
{
    (
      <MULT> Factor(factorValue) {result[0] *= factorValue[0];}
    |
      <DIV> Factor(factorValue)
      {result[0] /= factorValue[0];}
    )*
}

void Factor(double[] result) : {
    Token t;
}
{
    t = <NUMBER_LITERAL> {result[0] = Double.parseDouble(t.image);}
  |
    t = <ID> {
        Double value = getSymbolValue(t.image);
        if (value != null) {
            result[0] = value;
        } else {
            // Handle undefined variable; you might throw an error or set to 0
            result[0] = 0;
        }
    }
  |
    <LPAREN> Expression(result) <RPAREN>
}



void MainBlock() :
{}
{
  <START> Block() <END>
}

void Block() :
{}
{
  <LBRACE> (Content())? <RBRACE>
}

void Content() : {}
{
    Statements()
}

void Statements() : {}
{
    Statement() (StatementsTail())*
}


void StatementsTail() : {}
{
    Statement() (LOOKAHEAD(2) StatementsTail())?
}


void Statement() : {}
{
   AssignmentStatement() | PrintStatement()
}


void AssignmentStatement() : {
    Token varName;
    double[] result = new double[1]; // Array to hold the expression result
}
{
    varName = <ID> <EQUALS> Expression(result) <SEMICOLON>
    {
        insertSymbol(varName.image, result[0]); // Insert the result into the symbol table
    }
}


void PrintStatement() : {}
{
  <SHOW> <LPAREN> PrintArguments() <RPAREN> <SEMICOLON>
}

void PrintArguments() : {}
{
  PrintArgument() (PrintArgumentsTail())*
}

void PrintArgumentsTail() : {}
{
  <PLUS> PrintArgument() (LOOKAHEAD(3) PrintArgumentsTail())?
}

void PrintArgument() : {
  Token t;
}
{
  t = <STRING_LITERAL> { System.out.print(t.image.substring(1, t.image.length() - 1)); }
|
  t = <ID> {
    Double value = getSymbolValue(t.image);
    if (value != null) {
      System.out.print(value);
    } else {
      System.out.print("Undefined variable: " + t.image); // Handle undefined variables
    }
  }
}





